// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "chatServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thread>
#include <vector>

std::vector<std::string> users;

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::server;

class chatServerHandler : virtual public chatServerIf {
 public:
  chatServerHandler() {
    // Your initialization goes here
  }

  bool findUser(const std::string& username) {
    for(auto i : users){
      if(i == username) return true;
    }
    return false;
  }

  bool addUser(const std::string& username) {
    if(findUser(username)) return false;
    users.push_back(username);
    return true;
  }

  bool createRoom(const std::string& roomname) {
    // Your implementation goes here
    printf("createRoom\n");
  }

  bool joinRoom(const std::string& roomname) {
    // Your implementation goes here
    printf("joinRoom\n");
  }

};



int thriftThread(){
  int port = 9090;
  ::std::shared_ptr<chatServerHandler> handler(new chatServerHandler());
  ::std::shared_ptr<TProcessor> processor(new chatServerProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

int main(int argc, char **argv) {

}

