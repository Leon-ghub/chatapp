/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef chatServer_H
#define chatServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "server_types.h"

namespace server {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class chatServerIf {
 public:
  virtual ~chatServerIf() {}
  virtual bool findUser(const std::string& username) = 0;
  virtual bool addUser(const std::string& username) = 0;
  virtual bool createRoom(const std::string& roomname) = 0;
  virtual bool joinRoom(const std::string& roomname) = 0;
};

class chatServerIfFactory {
 public:
  typedef chatServerIf Handler;

  virtual ~chatServerIfFactory() {}

  virtual chatServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(chatServerIf* /* handler */) = 0;
  };

class chatServerIfSingletonFactory : virtual public chatServerIfFactory {
 public:
  chatServerIfSingletonFactory(const ::std::shared_ptr<chatServerIf>& iface) : iface_(iface) {}
  virtual ~chatServerIfSingletonFactory() {}

  virtual chatServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(chatServerIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<chatServerIf> iface_;
};

class chatServerNull : virtual public chatServerIf {
 public:
  virtual ~chatServerNull() {}
  bool findUser(const std::string& /* username */) override {
    bool _return = false;
    return _return;
  }
  bool addUser(const std::string& /* username */) override {
    bool _return = false;
    return _return;
  }
  bool createRoom(const std::string& /* roomname */) override {
    bool _return = false;
    return _return;
  }
  bool joinRoom(const std::string& /* roomname */) override {
    bool _return = false;
    return _return;
  }
};

typedef struct _chatServer_findUser_args__isset {
  _chatServer_findUser_args__isset() : username(false) {}
  bool username :1;
} _chatServer_findUser_args__isset;

class chatServer_findUser_args {
 public:

  chatServer_findUser_args(const chatServer_findUser_args&);
  chatServer_findUser_args& operator=(const chatServer_findUser_args&);
  chatServer_findUser_args() noexcept
                           : username() {
  }

  virtual ~chatServer_findUser_args() noexcept;
  std::string username;

  _chatServer_findUser_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const chatServer_findUser_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const chatServer_findUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_findUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chatServer_findUser_pargs {
 public:


  virtual ~chatServer_findUser_pargs() noexcept;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_findUser_result__isset {
  _chatServer_findUser_result__isset() : success(false) {}
  bool success :1;
} _chatServer_findUser_result__isset;

class chatServer_findUser_result {
 public:

  chatServer_findUser_result(const chatServer_findUser_result&) noexcept;
  chatServer_findUser_result& operator=(const chatServer_findUser_result&) noexcept;
  chatServer_findUser_result() noexcept
                             : success(0) {
  }

  virtual ~chatServer_findUser_result() noexcept;
  bool success;

  _chatServer_findUser_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const chatServer_findUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const chatServer_findUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_findUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_findUser_presult__isset {
  _chatServer_findUser_presult__isset() : success(false) {}
  bool success :1;
} _chatServer_findUser_presult__isset;

class chatServer_findUser_presult {
 public:


  virtual ~chatServer_findUser_presult() noexcept;
  bool* success;

  _chatServer_findUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _chatServer_addUser_args__isset {
  _chatServer_addUser_args__isset() : username(false) {}
  bool username :1;
} _chatServer_addUser_args__isset;

class chatServer_addUser_args {
 public:

  chatServer_addUser_args(const chatServer_addUser_args&);
  chatServer_addUser_args& operator=(const chatServer_addUser_args&);
  chatServer_addUser_args() noexcept
                          : username() {
  }

  virtual ~chatServer_addUser_args() noexcept;
  std::string username;

  _chatServer_addUser_args__isset __isset;

  void __set_username(const std::string& val);

  bool operator == (const chatServer_addUser_args & rhs) const
  {
    if (!(username == rhs.username))
      return false;
    return true;
  }
  bool operator != (const chatServer_addUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_addUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chatServer_addUser_pargs {
 public:


  virtual ~chatServer_addUser_pargs() noexcept;
  const std::string* username;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_addUser_result__isset {
  _chatServer_addUser_result__isset() : success(false) {}
  bool success :1;
} _chatServer_addUser_result__isset;

class chatServer_addUser_result {
 public:

  chatServer_addUser_result(const chatServer_addUser_result&) noexcept;
  chatServer_addUser_result& operator=(const chatServer_addUser_result&) noexcept;
  chatServer_addUser_result() noexcept
                            : success(0) {
  }

  virtual ~chatServer_addUser_result() noexcept;
  bool success;

  _chatServer_addUser_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const chatServer_addUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const chatServer_addUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_addUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_addUser_presult__isset {
  _chatServer_addUser_presult__isset() : success(false) {}
  bool success :1;
} _chatServer_addUser_presult__isset;

class chatServer_addUser_presult {
 public:


  virtual ~chatServer_addUser_presult() noexcept;
  bool* success;

  _chatServer_addUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _chatServer_createRoom_args__isset {
  _chatServer_createRoom_args__isset() : roomname(false) {}
  bool roomname :1;
} _chatServer_createRoom_args__isset;

class chatServer_createRoom_args {
 public:

  chatServer_createRoom_args(const chatServer_createRoom_args&);
  chatServer_createRoom_args& operator=(const chatServer_createRoom_args&);
  chatServer_createRoom_args() noexcept
                             : roomname() {
  }

  virtual ~chatServer_createRoom_args() noexcept;
  std::string roomname;

  _chatServer_createRoom_args__isset __isset;

  void __set_roomname(const std::string& val);

  bool operator == (const chatServer_createRoom_args & rhs) const
  {
    if (!(roomname == rhs.roomname))
      return false;
    return true;
  }
  bool operator != (const chatServer_createRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_createRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chatServer_createRoom_pargs {
 public:


  virtual ~chatServer_createRoom_pargs() noexcept;
  const std::string* roomname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_createRoom_result__isset {
  _chatServer_createRoom_result__isset() : success(false) {}
  bool success :1;
} _chatServer_createRoom_result__isset;

class chatServer_createRoom_result {
 public:

  chatServer_createRoom_result(const chatServer_createRoom_result&) noexcept;
  chatServer_createRoom_result& operator=(const chatServer_createRoom_result&) noexcept;
  chatServer_createRoom_result() noexcept
                               : success(0) {
  }

  virtual ~chatServer_createRoom_result() noexcept;
  bool success;

  _chatServer_createRoom_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const chatServer_createRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const chatServer_createRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_createRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_createRoom_presult__isset {
  _chatServer_createRoom_presult__isset() : success(false) {}
  bool success :1;
} _chatServer_createRoom_presult__isset;

class chatServer_createRoom_presult {
 public:


  virtual ~chatServer_createRoom_presult() noexcept;
  bool* success;

  _chatServer_createRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _chatServer_joinRoom_args__isset {
  _chatServer_joinRoom_args__isset() : roomname(false) {}
  bool roomname :1;
} _chatServer_joinRoom_args__isset;

class chatServer_joinRoom_args {
 public:

  chatServer_joinRoom_args(const chatServer_joinRoom_args&);
  chatServer_joinRoom_args& operator=(const chatServer_joinRoom_args&);
  chatServer_joinRoom_args() noexcept
                           : roomname() {
  }

  virtual ~chatServer_joinRoom_args() noexcept;
  std::string roomname;

  _chatServer_joinRoom_args__isset __isset;

  void __set_roomname(const std::string& val);

  bool operator == (const chatServer_joinRoom_args & rhs) const
  {
    if (!(roomname == rhs.roomname))
      return false;
    return true;
  }
  bool operator != (const chatServer_joinRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_joinRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class chatServer_joinRoom_pargs {
 public:


  virtual ~chatServer_joinRoom_pargs() noexcept;
  const std::string* roomname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_joinRoom_result__isset {
  _chatServer_joinRoom_result__isset() : success(false) {}
  bool success :1;
} _chatServer_joinRoom_result__isset;

class chatServer_joinRoom_result {
 public:

  chatServer_joinRoom_result(const chatServer_joinRoom_result&) noexcept;
  chatServer_joinRoom_result& operator=(const chatServer_joinRoom_result&) noexcept;
  chatServer_joinRoom_result() noexcept
                             : success(0) {
  }

  virtual ~chatServer_joinRoom_result() noexcept;
  bool success;

  _chatServer_joinRoom_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const chatServer_joinRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const chatServer_joinRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const chatServer_joinRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _chatServer_joinRoom_presult__isset {
  _chatServer_joinRoom_presult__isset() : success(false) {}
  bool success :1;
} _chatServer_joinRoom_presult__isset;

class chatServer_joinRoom_presult {
 public:


  virtual ~chatServer_joinRoom_presult() noexcept;
  bool* success;

  _chatServer_joinRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class chatServerClient : virtual public chatServerIf {
 public:
  chatServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  chatServerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool findUser(const std::string& username) override;
  void send_findUser(const std::string& username);
  bool recv_findUser();
  bool addUser(const std::string& username) override;
  void send_addUser(const std::string& username);
  bool recv_addUser();
  bool createRoom(const std::string& roomname) override;
  void send_createRoom(const std::string& roomname);
  bool recv_createRoom();
  bool joinRoom(const std::string& roomname) override;
  void send_joinRoom(const std::string& roomname);
  bool recv_joinRoom();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class chatServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<chatServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (chatServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_findUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_joinRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  chatServerProcessor(::std::shared_ptr<chatServerIf> iface) :
    iface_(iface) {
    processMap_["findUser"] = &chatServerProcessor::process_findUser;
    processMap_["addUser"] = &chatServerProcessor::process_addUser;
    processMap_["createRoom"] = &chatServerProcessor::process_createRoom;
    processMap_["joinRoom"] = &chatServerProcessor::process_joinRoom;
  }

  virtual ~chatServerProcessor() {}
};

class chatServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  chatServerProcessorFactory(const ::std::shared_ptr< chatServerIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< chatServerIfFactory > handlerFactory_;
};

class chatServerMultiface : virtual public chatServerIf {
 public:
  chatServerMultiface(std::vector<std::shared_ptr<chatServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~chatServerMultiface() {}
 protected:
  std::vector<std::shared_ptr<chatServerIf> > ifaces_;
  chatServerMultiface() {}
  void add(::std::shared_ptr<chatServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool findUser(const std::string& username) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->findUser(username);
    }
    return ifaces_[i]->findUser(username);
  }

  bool addUser(const std::string& username) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addUser(username);
    }
    return ifaces_[i]->addUser(username);
  }

  bool createRoom(const std::string& roomname) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createRoom(roomname);
    }
    return ifaces_[i]->createRoom(roomname);
  }

  bool joinRoom(const std::string& roomname) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->joinRoom(roomname);
    }
    return ifaces_[i]->joinRoom(roomname);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class chatServerConcurrentClient : virtual public chatServerIf {
 public:
  chatServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  chatServerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool findUser(const std::string& username) override;
  int32_t send_findUser(const std::string& username);
  bool recv_findUser(const int32_t seqid);
  bool addUser(const std::string& username) override;
  int32_t send_addUser(const std::string& username);
  bool recv_addUser(const int32_t seqid);
  bool createRoom(const std::string& roomname) override;
  int32_t send_createRoom(const std::string& roomname);
  bool recv_createRoom(const int32_t seqid);
  bool joinRoom(const std::string& roomname) override;
  int32_t send_joinRoom(const std::string& roomname);
  bool recv_joinRoom(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
